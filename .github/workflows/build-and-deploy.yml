name: Music Bar

# Run this workflow every time a new commit is pushed to master
on:
  push:
    branches:
      - "*"
  
jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  test:
    # Name the Job
    name: Test application
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    env:
      RDS_HOST: ${{ secrets.RDS_HOST }}
      RDS_USER: ${{ secrets.RDS_USER }}
      RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      RDS_PORT: ${{ secrets.RDS_PORT }}
      RDS_DB: ${{ secrets.RDS_DB }}

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # TODO: install poetry and test code
      - name: Install jest
        run: cd server && npm install
      - run: cd server && npm run test

  build:
    # Name the Job
    name: Build and publish docker image
    # Set the type of machine to run on
    runs-on: ubuntu-latest
    
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Build and publish docker images
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}
      - name: Build and publish frontend image
        uses: docker/build-push-action@v2
        with:
          context: client
          push: true
          tags: ghcr.io/mechajoe/songbar/frontend:v2
      - name: Build and publish backend image
        uses: docker/build-push-action@v2
        with:
          context: server
          push: true
          tags: ghcr.io/mechajoe/songbar/backend:v2

  deploy:
    name: Deploy latest version of code
    if: github.ref == 'refs/heads/main'
    needs: build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Generate kubeconfig, set namespace, deploy frontend and backend servers
        run: aws eks --region us-east-1 update-kubeconfig --name cis188 --role-arn arn:aws:iam::474844133309:role/jkonno --alias cis188
      - run: kubectl config set-context --current --namespace=jkonno
      - run: kubectl apply -f k8s/

      # Integration 1: Discord
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'